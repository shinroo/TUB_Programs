// Generated by gencpp from file lilac_fundamentals/Grid.msg
// DO NOT EDIT!


#ifndef LILAC_FUNDAMENTALS_MESSAGE_GRID_H
#define LILAC_FUNDAMENTALS_MESSAGE_GRID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lilac_fundamentals/Row.h>

namespace lilac_fundamentals
{
template <class ContainerAllocator>
struct Grid_
{
  typedef Grid_<ContainerAllocator> Type;

  Grid_()
    : rows()  {
    }
  Grid_(const ContainerAllocator& _alloc)
    : rows(_alloc)  {
    }



   typedef std::vector< ::lilac_fundamentals::Row_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lilac_fundamentals::Row_<ContainerAllocator> >::other >  _rows_type;
  _rows_type rows;




  typedef boost::shared_ptr< ::lilac_fundamentals::Grid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lilac_fundamentals::Grid_<ContainerAllocator> const> ConstPtr;

}; // struct Grid_

typedef ::lilac_fundamentals::Grid_<std::allocator<void> > Grid;

typedef boost::shared_ptr< ::lilac_fundamentals::Grid > GridPtr;
typedef boost::shared_ptr< ::lilac_fundamentals::Grid const> GridConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lilac_fundamentals::Grid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lilac_fundamentals::Grid_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lilac_fundamentals

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'lilac_fundamentals': ['/home/liliac/lilac/src/lilac_fundamentals/msg', '/home/liliac/lilac/src/lilac_fundamentals/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lilac_fundamentals::Grid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lilac_fundamentals::Grid_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lilac_fundamentals::Grid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lilac_fundamentals::Grid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lilac_fundamentals::Grid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lilac_fundamentals::Grid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lilac_fundamentals::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8a346b2eb1f1badd86d28e470d95fd4";
  }

  static const char* value(const ::lilac_fundamentals::Grid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8a346b2eb1f1badULL;
  static const uint64_t static_value2 = 0xd86d28e470d95fd4ULL;
};

template<class ContainerAllocator>
struct DataType< ::lilac_fundamentals::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lilac_fundamentals/Grid";
  }

  static const char* value(const ::lilac_fundamentals::Grid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lilac_fundamentals::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Row[] rows\n\
\n\
================================================================================\n\
MSG: lilac_fundamentals/Row\n\
Cell[] cells\n\
\n\
================================================================================\n\
MSG: lilac_fundamentals/Cell\n\
# constants for walls\n\
int32 RIGHT = 0\n\
int32 TOP = 1\n\
int32 LEFT = 2\n\
int32 BOTTOM = 3\n\
# walls that are present in this cell\n\
int32[] walls\n\
";
  }

  static const char* value(const ::lilac_fundamentals::Grid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lilac_fundamentals::Grid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rows);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Grid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lilac_fundamentals::Grid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lilac_fundamentals::Grid_<ContainerAllocator>& v)
  {
    s << indent << "rows[]" << std::endl;
    for (size_t i = 0; i < v.rows.size(); ++i)
    {
      s << indent << "  rows[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lilac_fundamentals::Row_<ContainerAllocator> >::stream(s, indent + "    ", v.rows[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LILAC_FUNDAMENTALS_MESSAGE_GRID_H
