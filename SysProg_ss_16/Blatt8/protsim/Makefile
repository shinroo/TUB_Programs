#
#  Makefile for protsim
#
#  ** This file was automatically generated by the command:
#  opp_makemake -f -u TkEnv -c omnetppconfig -o protsim -w -r -x messages support common routing userapps networks nodes emulation techgi4
#

# Name of target to be created (-o option)
TARGET = protsim

# User interface (uncomment one) (-u option)
# USERIF_LIBS=$(CMDENV_LIBS)
USERIF_LIBS=$(TKENV_LIBS)

# .ned or .h include paths with -I
INCLUDE_PATH=

# misc additional object and library files to link
EXTRA_OBJS=

# object files from other directories to link with (wildcard needed to prevent "no such file *.o" errors)
EXT_DIR_OBJS=$(wildcard  messages/*.o support/*.o common/*.o routing/*.o userapps/*.o networks/*.o nodes/*.o emulation/*.o techgi4/*.o)

# time stamps of other directories (used as dependency)
EXT_DIR_TSTAMPS=

# Additional libraries (-L option -l option)
LIBS=

#------------------------------------------------------------------------------
# Import generic settings from omnetppconfig
include omnetppconfig

MSGCOPTS= $(INCLUDE_PATH)

#------------------------------------------------------------------------------

# subdirectories to recurse into
SUBDIRS=  common emulation eval messages networks nodes results routing support techgi4 userapps

# object files in this directory
OBJS=   

# header files generated (from msg files)
GENERATEDHEADERS= 

#------------------------------------------------------------------------------
# contents of file makefrag:
# subdirs in the right order (and only the ones we want)
SUBDIRS=messages support common routing userapps networks nodes emulation techgi4

#------------------------------------------------------------------------------

$(TARGET): $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_TSTAMPS) subdirs Makefile
	$(CXX) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) $(OMNETPP_LIBS) -o $(TARGET)
	echo>.tstamp

$(OBJS) : $(GENERATEDHEADERS)


purify: $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_TSTAMPS) subdirs Makefile
	purify $(CXX) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) -L$(OMNETPP_LIB_DIR) $(KERNEL_LIBS) $(USERIF_LIBS) $(SYS_LIBS_PURE) -o $(TARGET).pure

.PHONY: subdirs $(SUBDIRS)

subdirs: $(SUBDIRS)

common:
	cd common && $(MAKE)

emulation:
	cd emulation && $(MAKE)

eval:
	cd eval && $(MAKE)

messages:
	cd messages && $(MAKE)

networks:
	cd networks && $(MAKE)

nodes:
	cd nodes && $(MAKE)

results:
	cd results && $(MAKE)

routing:
	cd routing && $(MAKE)

support:
	cd support && $(MAKE)

techgi4:
	cd techgi4 && $(MAKE)

userapps:
	cd userapps && $(MAKE)


#doc: neddoc doxy

#neddoc:
#	opp_neddoc -a

#doxy: doxy.cfg
#	doxygen doxy.cfg

generateheaders: $(GENERATEDHEADERS)
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) generateheaders) || exit 1; done

clean:
	rm -f $(TARGET)$(EXE_SUFFIX)
	rm -f *.o *_n.cc *_n.h *_m.cc *_m.h .tstamp
	rm -f *.vec *.sca
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) clean); done

depend:
	$(MAKEDEPEND) $(INCLUDE_PATH) -- *.cc
	# $(MAKEDEPEND) $(INCLUDE_PATH) -fMakefile.in -- *.cc
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) depend) || exit 1; done

makefiles:
	# recreate Makefile
	opp_makemake -f  -u TkEnv -c omnetppconfig -o protsim -w -r -x messages support common routing userapps networks nodes emulation techgi4 
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) makefiles) || exit 1; done

makefile-ins:
	# recreate Makefile.in
	opp_makemake -f -m  -u TkEnv -c omnetppconfig -o protsim -w -r -x messages support common routing userapps networks nodes emulation techgi4 
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) makefile-ins) || exit 1; done

# "re-makemake" and "re-makemake-m" are deprecated, historic names of the above two targets
re-makemake: makefiles
re-makemake-m: makefile-ins


# DO NOT DELETE THIS LINE -- make depend depends on it.

