//
// Generated file, do not edit! Created by opp_msgc 3.3 from NetworkPacket.msg.
//

#ifndef _NETWORKPACKET_M_H_
#define _NETWORKPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0303
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{ ... }} section:

#include "../common/protsim_defines.h"
// end cplusplus


/**
 * Class generated from <tt>NetworkPacket.msg</tt> by opp_msgc.
 * <pre>
 * message NetworkPacket
 * {
 *     fields:
 * 	string baseName;
 * 	long id;
 * 	long srcNode = PS_NODE_UNKNOWN;
 * 	long srcAppl = PS_APP_UNKNOWN;
 * 	long destNode = PS_NODE_UNKNOWN;
 * 	long destAppl = PS_APP_UNKNOWN;
 * 	bool alert = false;
 * 	long lastNode = PS_NODE_UNKNOWN;
 * 	long TTL = 0;
 * }
 * </pre>
 */
class NetworkPacket : public cMessage
{
  protected:
    opp_string baseName_var;
    long id_var;
    long srcNode_var;
    long srcAppl_var;
    long destNode_var;
    long destAppl_var;
    bool alert_var;
    long lastNode_var;
    long TTL_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NetworkPacket&);

  public:
    NetworkPacket(const char *name=NULL, int kind=0);
    NetworkPacket(const NetworkPacket& other);
    virtual ~NetworkPacket();
    NetworkPacket& operator=(const NetworkPacket& other);
    virtual cPolymorphic *dup() const {return new NetworkPacket(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getBaseName() const;
    virtual void setBaseName(const char * baseName_var);
    virtual long getId() const;
    virtual void setId(long id_var);
    virtual long getSrcNode() const;
    virtual void setSrcNode(long srcNode_var);
    virtual long getSrcAppl() const;
    virtual void setSrcAppl(long srcAppl_var);
    virtual long getDestNode() const;
    virtual void setDestNode(long destNode_var);
    virtual long getDestAppl() const;
    virtual void setDestAppl(long destAppl_var);
    virtual bool getAlert() const;
    virtual void setAlert(bool alert_var);
    virtual long getLastNode() const;
    virtual void setLastNode(long lastNode_var);
    virtual long getTTL() const;
    virtual void setTTL(long TTL_var);
};

inline void doPacking(cCommBuffer *b, NetworkPacket& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, NetworkPacket& obj) {obj.netUnpack(b);}

#endif // _NETWORKPACKET_M_H_
